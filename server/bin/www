#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require('dotenv').config();

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');
var models = require('../models');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Adding socket middleware
 */
var io = require('socket.io')(server);

/**
 * Setting up socket
 */
io.on('connection', socket => {
	console.log('A user connected to the socket!');

	//Here we listen on a new namespace called "incoming data"
	socket.on('incoming data', data => {
		//Here we broadcast it out to all other sockets EXCLUDING the socket which sent us the data
		console.log(data);
	});

	socket.on('woot', (data, send) => {
		console.log("SOCKET WOOT WOOT WOOT");
		console.log(data);
		send('WOOOHOOOOO');
	})

	socket.on('comment', (data, send) => {
		console.log("COMMENT SOCKET SERVER");
		console.log(data);
		send('SENT THE COMMENT');
		socket.broadcast.emit('comment', data)
	})

	socket.on('follow', (data, send) => {
		console.log("FOLLOW SOCKET SERVER");
		console.log(data);
		send('SENT THE FOLLOW');
		socket.broadcast.emit('follow', data)
	})
	
	socket.on('disconnect', () => {
		console.log('User disconnected');
	});
});

/* Syncs models with database before starting server */
models.sequelize.sync().then(function() {
	/**
	 * Listen on provided port, on all network interfaces.
	 */
	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

	console.log('Listening on ' + bind);
}
